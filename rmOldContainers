#!/bin/bash
#############################################################################
#
#   rmOldContainers
#
#############################################################################

declare -a collection
declare -i blocksUsedBefore="$(df /var/lib/docker/volumes | awk '{if (NR==2) {print $3}}')"


# remove all containers which are stopped along with their associated volumes

collection=()
collection+=( $(docker ps --all --quiet --filter "status=dead" --format "{{.Names}}") )
collection+=( $(docker ps --all --quiet --filter "status=exited" --format "{{.Names}}") )
if [ ${#collection[@]} -gt 0 ]; then
    printf "Deleting %d exited containers\n" ${#collection[@]}
    docker rm --volumes "${collection[@]}"
fi



# remove any 'dangling' images  (those with <none> in name)

collection=( $(docker images --quiet --filter "dangling=true") )
declare image
for image in $(docker image ls --format '{{.Repository}}:{{.Tag}}' | grep ':tmp'); do
    collection+=( $image )
done
for image in $(docker image ls --format '{{.Repository}}:{{.Tag}}' | grep -v '<none>'); do
    [ $(docker inspect "$image" | jq -r '.[].Config.Labels."container.fingerprint"?') = "${image##*:}" ] || continue
    collection+=( $image )
done
for image in $(docker images | grep '<none>' | awk '{if($1 == "<none>"){print $3}}'); do
    [ $(docker inspect "$image" | jq -r '.[].Config.Labels."container.fingerprint"?') = "${image##*:}" ] || continue
    collection+=( $image )
done
for image in $(docker ps --format '{{.Image}}' | sort -u); do
    collection=( ${collection[@]/$image} )
done
if [ ${#collection[@]} -gt 0 ]; then
    printf "Deleting %d dangling/temporary images\n" ${#collection[@]}
    docker rmi "${collection[@]}"
fi



# get list of volumes associated with running containers

collection=()
for volume in $(docker ps --all --quiet); do
    collection+=( $(docker inspect "$volume" | jq -r '.[].Mounts[].Name | select(.)') )
done
printf "Detected %d mounts associated with running containers\n" ${#collection[@]}
declare volumes="$( printf "%s\n" "${collection[@]}" )"



# remove directories associated with unused volumes

declare -i deletions=0
for dir in $(sudo find '/var/lib/docker/volumes/' -mindepth 1 -maxdepth 1 -type d); do
    (grep "$dir" <<< "$volumes") && continue
    sudo rm -rf "$dir"
    (( deletions++ ))
done
[ $deletions -gt 0 ] && printf "Deleted %d directories associated with volumes no longer in use\n" $deletions


# show results

declare -i blocksUsedAfter="$(df /var/lib/docker/volumes | awk '{if (NR==2) {print $3}}')"
printf "Recovered %d kb\n" $(( blocksUsedBefore - blocksUsedAfter ))
echo

mapfile -t images < <(docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.CreatedSince}}\t{{.Size}}")
if [ ${#images[*]} -ne 0 ]; then
    # show image report
    echo
    echo -e "\e[97m${images[0]}\e[0m"
    unset images[0]
    printf '%s\n' "${images[@]}" | sort 
fi
