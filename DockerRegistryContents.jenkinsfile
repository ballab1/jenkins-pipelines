@Library('jenkins-sharedlibs')_

/////////////////////////////////////////////////////////////////////////////////////////////////

pipeline {
    agent { label 'docker-host' }
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        disableConcurrentBuilds()
        disableResume()
        timestamps()
    }
    stages {
        stage('Generate JSON') {
            agent {
                docker {
                    image 'registry.ubuntu.home/alpine/build_container:latest'
                    label 'docker-host'
                    args "--volume '/home/bobb/src/keys:/keys' --volume '${WORKSPACE}:/opt' --entrypoint='' --dns=10.3.1.4"
                    registryUrl 'https://registry.ubuntu.home/'
                }
            }
            steps {
                ansiColor('xterm') {
                    sh '''
                         (cd bin;git-crypt unlock /keys/work-stuff.key)
                          docker-utilities report --format json --output /opt/registryContents.json
                          cp --remove-destination "$(dirname "$(command -v docker-utilities)")/registryReport.groovy" /opt
                       '''
                }
                stash includes: 'registryContents.json, storage.txt, registryReport.groovy',  name: 'json'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'registryContents*.json'
            }
        }
        stage('Generate Report') {
            agent {
                docker {
                    image 'registry.ubuntu.home/docker.io/groovy:2.6-jre-alpine'
                    label 'docker-host'
                    args "--volume '${WORKSPACE}:/home/groovy/scripts'"
                    registryUrl 'https://registry.ubuntu.home/'
                    reuseNode true
                }
            }
            steps {
                sh '''
                      [ ! -e registryContents.json ] || rm registryContents.json
                      find . -name '*.txt' -delete
                   '''
                unstash 'json'
                sh 'JSON="${WORKSPACE}/registryContents.json" groovy registryReport.groovy'
                archiveArtifacts allowEmptyArchive: true, artifacts: '**/*.txt'
            }
        }
    }
    post {
        always {
            kafkaBuildReporter()
        }
        cleanup {
            deleteDir()
        }
    }
}
