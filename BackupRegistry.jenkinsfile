@Library('jenkins-sharedlibs')_

pipeline {
    agent { label 'ubuntu-s2' }
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        disableConcurrentBuilds()
        disableResume()
        timestamps()
    }
    parameters {
        string(name: 'SOURCE', defaultValue: '/var/lib/docker-registry/docker/registry/v2/', description: 'source directory do backup')
        string(name: 'DESTINATION', defaultValue: '/mnt/Registry', description: 'remote destination for backup')
    } 
    stages {
        stage ('Check mount') {
            steps {
                sh returnStatus: true, script: "./checkMounted.sh " + params.DESTINATION
                script {
                    if (fileExists('./status.groovy')) {
                        load './status.groovy'
                    } 
                } 
            }
        }
        stage ('Backup Registry') {
            steps {
//                                           --compress
//                                           --password-file='/home/bobb/.inf.nas.rsync'
                sh """sudo -u xxxxxx rsync --delete              \
                                           --devices             \
                                           --executability       \
                                           --force               \
                                           --no-group            \
                                           --no-owner            \
                                           --prune-empty-dirs    \
                                           --recursive           \
                                           --safe-links          \
                                           --specials            \
                                           --stats               \
                                           --times               \
                                           '${params.SOURCE}' '${params.DESTINATION}' | tee rsync.log
                    """
                archiveArtifacts artifacts: 'rsync.log' 
            }
        }
    }
}
