#!/bin/echo 'This script cannot be executed directly. Please source from another script'

#----------------------------------------------------------------------------------------------
#  functions for 'backups'
#----------------------------------------------------------------------------------------------


declare -ri MAX_FILES=${MAX_FILES:-10}
declare -r BACKUP_DIR="${BACKUP_DIR:-/home/bobb/src}"

#----------------------------------------------------------------------------
function as_root() {

    # only run as root since the access to /mnt/k8s requires root
    if [ ${EUID:-0} -ne 0 ]; then
        # shellcheck disable=SC2046
        sudo --preserve-env "$0" "$@"
        exit
    fi
}

#----------------------------------------------------------------------------
function backup_pvs() {

    local -r backup_file="pv-backups.$(date +'%Y%m%d').tgz"
    ssh bobb@s8 "cd /tmp; \
                 sudo tar -czf '${backup_file}'; \
                 sudo chown bobb:user '${backup_file}'; \
                 mv '${backup_file}' ~/src/pv-backups/"
}

#----------------------------------------------------------------------------
function build_tar() {

    local -r tarFile="${1:?}"

    echo
    echo "${TARGET}: Creating backup of files"

    if [ "$TARGET" = "$NODENAME" ]; then
        local -a srcFiles=()
        while read -r file; do
            (sudo test -e "$file") || continue
            (sudo test -e "${file}/.git") && continue
            #shellcheck disable=SC2207
            srcFiles+=( $(sudo find "$file" -type f | grep -v '.git' ||:) )
        done < "${WORKSPACE}/tarfiles.lst"
        [ "${#srcFiles[*]}" -eq 0 ] && return 1
        (sudo tar -cvzf "$tarFile" "${srcFiles[@]}") 2>&1 > "${tarFile}.log"
        local -r og="$(id -g):$(id -u)"
        sudo chown "$og" "$tarFile"

    elif [ "$TARGET" = 'postgres' ]; then
        backup_file="postgres.$(date +'%Y%m%d').sql"
        kubectl exec "$LATEST_CONTENT" -n postgres -- pg_dumpall -h 127.0.0.1 -U postgres \
          | sed '/^-- Started/d; /^-- Completed/d' > "$backup_file"
        tar -cvzf "$tarFile" "$backup_file"

    else
        (sudo test -d "$LATEST_CONTENT") || exit 1
        local prefix="${LATEST_CONTENT}/"
        while read -r file; do
            (sudo test -e "${LATEST_CONTENT}/$file") || continue
            (sudo test -e "${LATEST_CONTENT}/${file}/.git") && continue
            #shellcheck disable=SC2207
            srcFiles+=( "$file" )
        done < <(sudo find "$prefix" -type f | sed -e 's|^'"$prefix"'||' ||:)
        [ "${#srcFiles[*]}" -eq 0 ] && return 1
        #shellcheck disable=SC2086
        (sudo tar -cvzf "$tarFile" -C "$LATEST_CONTENT" "${srcFiles[@]}" ) 2>&1 > "${tarFile}.log"
        local -r og="$(id -g):$(id -u)"
        sudo chown "$og" "$tarFile"
    fi
}

#----------------------------------------------------------------------------
function compareNewToOld() {

    local -r latest_tar="${1:?}"
    local -r backup_dir="${2:?}"

    # use the sha256 values to compare contents of latest dir and last tarfile
    local -r previousFile="$(getLastBackup "$backup_dir")"

    if [ "${#previousFile}" -eq 0 ]; then
        echo "No previousfiles found"
    else
        echo "Comparing '${LATEST_CONTENT}' with contents of previous: '${previousFile}'"

        local -r work_dir="${WORKSPACE}/tmp/${TARGET}"
        [ -d "$work_dir" ] && sudo rm -rf "$work_dir"
        mkdir -p "$work_dir"

        # check the sha of every file from previous and latest combined into a single sha, and build filelist of all files
        local -r filelist="${work_dir}/files.txt"
        :> "$filelist"
        previousSha="$(expandFile "${work_dir}/previous" "$previousFile" "$filelist")"
        targetSha="$(expandFile "${work_dir}/latest" "$latest_tar" "$filelist")"
        if [ "${#previousSha}" -gt 0 ] && [ "${#targetSha}" -gt 0 ]; then
            [ "$previousSha" = "$targetSha" ] && return 0
        fi

        # must be a difference, loop through every file to find what changed
        local -a files=()
        mapfile -t files < <(sort -u "$filelist")
        local file diffs=0
        for file in "${files[@]}"; do
            if [ ! -f "${work_dir}/previous/$file" ] && [ ! -f "${work_dir}/latest/$file" ]; then
                continue
            elif [ ! -f "${work_dir}/latest/$file"  ]; then
                echo "   removed file:  '$file'"
                ((diffs++)) ||:
            elif [ ! -f "${work_dir}/previous/$file"  ]; then
                echo "   new file:      '$file'"
                ((diffs++)) ||:
            elif ! (diff -q "${work_dir}/previous/$file" "${work_dir}/latest/$file" &> /dev/null); then
                echo "   files differ:  'previous/$file' & 'latest/$file'"
                ((diffs++)) ||:
            else
                rm "${work_dir}/previous/$file" "${work_dir}/latest/$file"
            fi
        done
        [ "$diffs" -eq 0 ] && return 0
        echo "${diffs} differences detected between previous: ${previousFile} and ${latest_tar}"
    fi

    # move the latest tarfile to the backup location and create a symlink
    mv "$latest_tar" "$BASE"
    updateStatus 'completed.gif' "${LATEST_CONTENT}: backed up to ${BASE}"
}

#----------------------------------------------------------------------------
function expandFile() {

    local -r dir="${1:?}"
    local -r file="${2:?}"
    local -r filelist="${3:?}"

    [ -f "$filelist" ] || return
    mkdir -p "$dir"
    cd "$dir" ||:
    {
        local f
        while read -r f; do
            [ -f "$f" ] || continue
            sha256sum "$f" | cut -d ' ' -f 1
            echo "$f" >> "$filelist"
        done < <(tar xvzf "$file")

     } | sha256sum | cut -d ' ' -f 1
}

#----------------------------------------------------------------------------
function getLastBackup() {

    local -r backup_dir="${1:?}"
    find "${backup_dir}" -maxdepth 1 -mindepth 1 -type f -name '*.tgz' | sort | tail -1
}

#----------------------------------------------------------------------------
function main() {

    export TERM=linux

    [ ! -d "$WORKSPACE" ] && mkdir -p "$WORKSPACE"

    export BASE="${BACKUP_DIR}/${TARGET}"
    [ ! -d "$BASE" ] && mkdir -p "$BASE"

    :> "$JOB_STATUS"

    #shellcheck disable=SC1091
    source /home/bobb/.bin/trap.bashlib
    trap onexit ERR
    trap onexit INT
    trap onexit PIPE
    trap onexit EXIT


    # generate tar backup
    local -r latest_tar="${WORKSPACE}/${TARGET}.$(date +"%Y%m%d").tgz"
    build_tar "$latest_tar"
    compareNewToOld "$latest_tar" "$BASE"

    # remove old files to keep a fixed number of backups
    remove_old_files "$BASE" "$MAX_FILES"

    # make sure symlink is correct
    update_symlink "$BASE"

    if [ "$BASE" = 'postgres' ];then
        remove_old_files 'pv-backups' "$MAX_FILES"
        update_symlink 'pv-backups'
    fi

    return 0
}

#----------------------------------------------------------------------------
function onexit()
{
    [ -e "${WORKSPACE}/tmp/${TARGET}" ] && rm -rf "${WORKSPACE}/tmp/${TARGET}"
    if [ -s "$JOB_STATUS" ]; then
      echo "= $JOB_STATUS contains =================================="
      cat "$JOB_STATUS"
      echo '========================================================='
    fi
    echo
    return 0
}

#----------------------------------------------------------------------------
function remove_old_files()
{
    local -r backup_dir="${1:?}"
    local -r max_files="${2:?}"

    # remove old files to keep a fixed number of backups
    local -a files
    mapfile -t files < <(find "$backup_dir" -maxdepth 1 -mindepth 1 -type f | sort -r)
    local -i i="${#files[*]}"
    while [ $(( i-- )) -gt "$max_files" ]; do
        rm "${files[$i]}"
        updateStatus 'completed.gif' "removed ${files[$i]}" 'force'
    done
}

#----------------------------------------------------------------------------
function update_symlink()
{
    local -r backup_dir="${1:?}"

    ln -s -f "$(getLastBackup "$backup_dir")" "${backup_dir}.tgz"
}

#----------------------------------------------------------------------------
function updateStatus()
{
    local -r badge=${1:?}
    local -r text=${2:?}
    local -r force=${3:-}

    if [ ! -s "$JOB_STATUS" ] || [ "${force:-}" ]; then
        echo "Updating $JOB_STATUS" >&2
        {
            echo "$badge"
            echo "$text"
            echo 'UNSTABLE'
         } > "$JOB_STATUS"
    fi
    return 0
}

##########################################################################################################
