import groovy.transform.Field

@Library('jenkins-sharedlibs')_

// Initialize here so it is still available in post block if build fails.
@Field String WWW = '/home/bobb/production/workspace.production/www/'


pipeline {
    agent { label 's3.ubuntu.home' }
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        disableConcurrentBuilds()
        disableResume()
        timestamps()
    }
    stages {
        stage ('Check mount') {
            steps {
                sh returnStatus: true, script: "./checkMounted.sh /mnt/k8s"
                loadIfExists './status.groovy'
            }
        }
        stage ('workers') {
            parallel {
                stage ('Backup Recipes') {
                    steps {
                        sh "./backup.sh 'recipes' '/mnt/k8s/recipes' "
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'recipes*'
                        loadIfExists './status.groovy'
                   }
                }
                stage ('Backup Versions') {
                    steps {
                        sh "./backup.sh 'versions' '/mnt/k8s/versions'"
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'versions*'
                        loadIfExists './status.groovy'
                   }
                }
                stage ('Backup Web') {
                    steps {
                        sh "./backup.sh 'web' '/mnt/k8s/web'"
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'web*'
                        loadIfExists './status.groovy'
                   }
                }
                stage ('Backup Heros') {
                    steps {
                        sh "./backup.sh 'stormshot' '/mnt/k8s/stormshot'"
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'stormshot*'
                        loadIfExists './status.groovy'
                   }
                }
            }
        }
    }
    post {
        always {
            kafkaBuildReporter()
        }
//        cleanup {
//            deleteDir()
//        }
    }
}
