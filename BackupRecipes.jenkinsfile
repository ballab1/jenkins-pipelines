import groovy.transform.Field

@Library('jenkins-sharedlibs')_

// Initialize here so it is still available in post block if build fails.
@Field String WWW = '/home/bobb/production/workspace.production/www/'


pipeline {
    agent { label 'ubuntu-s3' }
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        disableConcurrentBuilds()
        disableResume()
        timestamps()
    }
    stages {
        stage ('Check mount') {
            steps {
                sh returnStatus: true, script: "./checkMounted.sh /mnt/k8s"
                loadIfExists './status.groovy'
            }
        }
        stage ('workers') {
            parallel {
                stage ('Backup Recipes') {
                    steps {
                        sh "cd /mnt/k8s/recipes;tar czf '${WORKSPACE}/recipes.tgz' *;cd '${WORKSPACE}'"
                        sh "./backup.sh '${WORKSPACE}/recipes.tgz'"
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'recipes.tgz'
                        loadIfExists './status.groovy'
                   }
                }
                stage ('Backup Versions') {
                    steps {
                        sh "cd /mnt/k8s/versions;tar czf '${WORKSPACE}/versions.tgz' *;cd '${WORKSPACE}'"
                        sh "./backup.sh '${WORKSPACE}/versions.tgz'"
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'versions.tgz'
                        loadIfExists './status.groovy'
                   }
                }
                stage ('Backup Web') {
                    steps {
                        sh "cd /mnt/k8s/web;tar czf '${WORKSPACE}/web.tgz' *;cd '${WORKSPACE}'"
                        sh "./backup.sh '${WORKSPACE}/web.tgz'"
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'web.tgz'
                        loadIfExists './status.groovy'
                   }
                }
                stage ('Backup Heros') {
                    steps {
                        sh "cd /mnt/k8s/stormshot;tar czf '${WORKSPACE}/stormshot.tgz' *;cd '${WORKSPACE}'"
                        sh "./backup.sh '${WORKSPACE}/stormshot.tgz'"
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'stormshot.tgz'
                        loadIfExists './status.groovy'
                   }
                }
                stage ('Backup Money') {
                    steps {
                        sh "cd /mnt/k8s/money;tar czf '${WORKSPACE}/money.tgz' *;cd '${WORKSPACE}'"
                        sh "./backup.sh '${WORKSPACE}/money.tgz'"
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'money.tgz'
                        loadIfExists './status.groovy'
                   }
                }
            }
        }
    }
    post {
        always {
            kafkaBuildReporter()
        }
//        cleanup {
//            deleteDir()
//        }
    }
}
