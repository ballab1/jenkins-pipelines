import groovy.transform.Field

@Library('jenkins-sharedlibs')_

// Initialize here so it is still available in post block if build fails.
@Field String WWW = '/home/bobb/production/workspace.production/www/'


pipeline {
    agent { label 'ubuntu-s3' }
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        disableConcurrentBuilds()
        disableResume()
        timestamps()
    }
    stages {
        stage ('Check mount') {
            steps {
                sh returnStatus: true, script: "./checkMounted.sh /mnt/home"
                loadIfExists './status.groovy'
            }
        }
        stage ('Backup Recipes') {
            steps {
//               dir (WWW + 'recipes') {
//                    sh "ls -l"
//                    sh "tar czf '${WORKSPACE}/recipes.tgz' * ||:"
                    sh "cd /home/bobb/production/workspace.production/www/recipes;tar czf '${WORKSPACE}/recipes.tgz' *;cd '${WORKSPACE}'"
//                }
                sh "./backup.sh '${WORKSPACE}/recipes.tgz'"
                loadIfExists './status.groovy'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'recipes.tgz'
           }
        }
        stage ('Backup Versions') {
            steps {
//               dir (WWW + 'versions') {
//                    sh "ls -l"
//                    sh "tar czf '${WORKSPACE}/versions.tgz' * ||:"
                    sh "cd /home/bobb/production/workspace.production/www/versions;tar czf '${WORKSPACE}/versions.tgz' *;cd '${WORKSPACE}'"
//                }
                sh "./backup.sh '${WORKSPACE}/versions.tgz'"
                loadIfExists './status.groovy'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'versions.tgz'
           }
        }
    }
    post {
        always {
            kafkaBuildReporter()
        }
        cleanup {
            deleteDir()
        }
    }
}
