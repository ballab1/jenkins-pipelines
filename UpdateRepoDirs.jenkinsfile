@Library('jenkins-sharedlibs')_

/////////////////////////////////////////////////////////////////////////////////////////////////

def hosts = [:]
def names = []


def prepareNodeStage(String host) {
  return {
    node (host) {
      checkout scm
      unstash 'dirspecs'
      sh '''
            hostname
            ./updateBin.sh
            ./updateWorkspace.sh
         '''
      stash name: host, allowEmpty: true, includes: '*.inf'
    }
  }
}


timestamps {

  stage ('Initialization') {
    node('master') {
      properties([
        buildDiscarder(logRotator(numToKeepStr: '20')),
        disableConcurrentBuilds(),
        disableResume(),
        pipelineTriggers([
          [$class: 'GenericTrigger',
            genericVariables: [
              [
                key: 'reponame', 
                defaultValue: params.reponame, 
                value: '$.repository.name', 
                regexpFilter: '-(deploy-s1|deploy-s3|deploy-s4|deploy|stuff)$'
              ]
            ],
            causeString: 'Triggered by a change to $reponame',
//            printContributedVariables: true,
            silentResponse: false,
            regexpFilterText: '$reponame',
            regexpFilterExpression: '^' + reponame + '$'
          ]
        ])
      ])

      updateRepoDirs reponame
      stash name: 'dirspecs', allowEmpty: true, includes: '*.dirs'
      names = activeNodes()
      for (host in names) {
        hosts["${host}"] = prepareNodeStage(host)
      }
    }
  }

  stage ('Process nodes') {
    parallel hosts
  }

  stage ('Generate Report') {
    node {
      sh '''
         rm *.inf *.dirs ||:
         :> results.txt
         date >> results.txt
         echo >> results.txt
      '''
      for (host in names) {
        try {
          unstash host
          sh '[ ! -e "' + host + '.inf" ] || (cat "' + host + '.inf" >> results.txt)'
//          sh "[ ! -e '${host}.inf' ] || (cat '${host}.inf' >> results.txt)"
         }
         catch (error) { 
           echo 'No information found for ' + host
         }
      }
      archiveArtifacts allowEmptyArchive: true, artifacts: 'results.txt,*.inf'
    }
  }

  stage ('submit-metrics') {
    node {
      kafkaBuildReporter()
    }
  }

}