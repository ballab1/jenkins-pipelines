@Library('jenkins-sharedlibs')_


/////////////////////////////////////////////////////////////////////////////////////////////////

def hosts = [:]
def names = []


def prepareNodeStage(String host) {
  return {
    node (host) {
      deleteDir()
      checkout scm
      unstash 'dirspecs'
      sh '''
            hostname
            ./updateBin.sh
            ./updateWorkspace.sh  ''' + host + '''
         '''
      stash name: host, allowEmpty: true, includes: '*.inf'
      deleteDir()
    }
  }
}


timestamps {

  stage ('Initialization') {
    node('built-in') {
      properties([
        buildDiscarder(logRotator(numToKeepStr: '20')),
        disableConcurrentBuilds(),
        disableResume(),
        pipelineTriggers([
          [$class: 'GenericTrigger',
            genericVariables: [
              [
                key: 'reponame',
                defaultValue: params.reponame,
                value: '$.repository.name',
                regexpFilter: '-(deploy-s1|deploy-s3|deploy-s4|deploy|stuff)$'
              ]
            ],
            causeString: 'Triggered by a change to $reponame',
//            printContributedVariables: true,
            silentResponse: false,
            regexpFilterText: '$reponame',
            regexpFilterExpression: '^' + reponame + '$'
          ]
        ])
      ])

      checkout scm
      updateRepoDirs reponame
      stash name: 'dirspecs', allowEmpty: true, includes: '*.dirs'
      for (host in activeNodes()) {
        if (fileExists(host + '.dirs')) {
          hosts["${host}"] = prepareNodeStage(host)
          names += host
        }
      }
      if (names.size() == 0) {
        manager.buildUnstable()
      }
    }
  }

  stage ('Process nodes') {
    parallel hosts
  }

  stage ('Generate Report') {
    node {
      updateRepoDirsResults(names)
      deleteDir()
    }
  }

  stage ('submit-metrics') {
    node {
      kafkaBuildReporter()
      deleteDir()
    }
  }
}
