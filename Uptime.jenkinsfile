@Library('jenkins-sharedlibs')_

/////////////////////////////////////////////////////////////////////////////////////////////////

pipeline {
    agent { label 'master' }
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        disableConcurrentBuilds()
        disableResume()
        timestamps()
    }
    stages {
        stage ('Process Items') {
            steps {
                parallelSteps(activeNodes('true'),
                              { nodeName, body -> 
                                  nodeStep(nodeName, body)
                              }, 
                              { nodeName ->
                                  sh "./realUptime > ${nodeName}.txt"
                                  archiveArtifacts "${nodeName}.txt"
                                  stash includes: "${nodeName}.txt", name: nodeName
                              })
            }
        }
        stage ('Consolidate JSON') {
            steps {
                script {
                   def json = [:]
                   def nodes = activeNodes('true')
                   for (int i=0; i<nodes.size(); ++i) {
                       def nodeName = nodes[i];
                       unstash name: nodeName
                       def uptime = readFile("${nodeName}.txt")
                       echo "${nodeName} uptime: ${uptime}"
                       json[nodeName] = parseUptime ( uptime )
                       kafkaProducer('uptime',[ toJSON([ "${nodeName}" : json[nodeName] ]) ])
                   }
                   writeFile file: 'uptime.json', text: toJSON(json)
                }
                archiveArtifacts artifacts: '*.json'
                stash includes: 'uptime.json', name: 'json'
            }
        }
        stage('Generate Report') {
          agent {
               docker {
                   image 'ubuntu-s2:5000/thirdparty/groovy:2.6-jre-alpine'
                   label 'docker-host'
                   registryUrl 'http://ubuntu-s2:5000/'
               }
          }
          steps {
               unstash 'json'
               sh 'groovy uptimeReport.groovy'
               archiveArtifacts allowEmptyArchive: true, artifacts: 'report.html'
               postReport("${WORKSPACE}/report.html")
          }
        }
    }
    post {
        always {
            kafkaBuildReporter()
        }
    }
}
